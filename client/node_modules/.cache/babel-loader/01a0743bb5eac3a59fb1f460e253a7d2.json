{"ast":null,"code":"var _jsxFileName = \"/Users/andriitaran/Desktop/brainstation-projects/projects/andrii-taran-brainflix/sprint-three/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport \"./styles/main.css\";\nimport axios from \"axios\";\nimport Header from \"./components/Header\";\nimport VideoPlayer from \"./components/VideoPlayer\";\nimport VideoInfo from \"./components/VideoInfo\";\nimport Comments from \"./components/Comments\";\nimport VideosList from \"./components/VideosList\";\nconst mainVideo = \"1af0jruup5gu\";\nexport default class App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      videos: [],\n      currentVideo: {},\n      loading: false\n    };\n\n    this.addComment = comment => {\n      const randomVideoId = //to make sure adding comments work correctly only on the first loaded video, we're comparing main video with random video stored in state\n      this.props && this.props.match.params.id ? this.props.match.params.id : this.state.currentVideo.id;\n      axios({\n        method: \"post\",\n        //posts comments to the API\n        url: `http://localhost:5000/api/videos/${randomVideoId}/comments`,\n        data: {\n          name: comment.name,\n          comment: comment.comment\n        },\n        headers: {\n          \"Content-Type\": \"application/json;charset=UTF-8\"\n        }\n      }).then(response => {\n        return axios.get( //gets video with updated comments\n        `http://localhost:5000/api/videos/${randomVideoId}`);\n      }).then(response => {\n        //sorts comments by time of posting\n        response.data.comments.sort((a, b) => {\n          return b.timestamp - a.timestamp;\n        });\n        this.setState({\n          currentVideo: response.data //updates video with updated comments\n\n        });\n      });\n    };\n\n    this.deleteComment = comment => {\n      const videoId = //to make sure adding comments work correctly only on the first loaded video, we're comparing main video with random video stored in state\n      this.props && this.props.match.params.id ? this.props.match.params.id : this.state.currentVideo.id;\n      axios.delete(`http://localhost:5000/api/videos/${videoId}/comments/${comment.id}`).then(response => {\n        return axios.get( //gets video with updated comments\n        `http://localhost:5000/api/videos/${videoId}`);\n      }).then(response => {\n        //sorts comments by time of posting\n        response.data.comments.sort((a, b) => {\n          return b.timestamp - a.timestamp;\n        });\n        this.setState({\n          currentVideo: response.data //updates video with updated comments\n\n        });\n      });\n    };\n\n    this.likeVideo = video => {\n      axios({\n        method: \"put\",\n        url: `http://localhost:5000/api/videos/${video.id}/likes`,\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\"\n        }\n      }).then(response => {\n        response.data.comments.sort((a, b) => {\n          //sorts comments by time of posting\n          return b.timestamp - a.timestamp;\n        });\n        this.setState({\n          currentVideo: response.data //updates video with updated likes and proper comments timestamp\n\n        });\n      });\n    };\n  }\n\n  componentDidMount(prevProps) {\n    axios({\n      method: \"get\",\n      url: `http://localhost:5000/api/videos/${mainVideo}`,\n      headers: {\n        \"Access-Control-Allow-Origin\": \"*\"\n      }\n    }).then(response => {\n      response.data.comments.sort((a, b) => {\n        //sorts comment by time of posting\n        return b.timestamp - a.timestamp;\n      });\n      this.setState({\n        currentVideo: response.data,\n        // sets random video as the main video\n        loading: true\n      });\n    }).then(axios.get(\"http://localhost:5000/api/videos\").then(responseArr => {\n      this.setState({\n        videos: responseArr.data.filter(video => {\n          // excludes main video from array of side videos\n          return video.id !== this.state.currentVideo.id;\n        })\n      });\n    }));\n  }\n\n  componentDidUpdate(prevProps) {\n    console.log(\"Component was updated!\");\n\n    if (prevProps.match.params.id !== this.props.match.params.id) {\n      // checks if new video is not the same as a previous one\n      axios.all([axios.get( //gets main video details from an API\n      `http://localhost:5000/api/videos/${this.props.match.params.id}`), axios.get( //gets videos from API\n      `http://localhost:5000/api/videos/`)]).then(responseArr => {\n        responseArr[0].data.comments.sort((a, b) => {\n          //sorts comments by time of posting\n          return b.timestamp - a.timestamp;\n        });\n        this.setState({\n          //assigns new main video and side video to state\n          currentVideo: responseArr[0].data,\n          videos: responseArr[1].data.filter(video => {\n            return video.id !== this.props.match.params.id;\n          }),\n          loading: true\n        });\n      });\n      window.scrollTo(0, 0); // takes user to the top of the page after click on the side video\n    }\n  } // function for adding new comments\n\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }), React.createElement(VideoPlayer, {\n      currentVideo: this.state.currentVideo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }), React.createElement(\"section\", {\n      className: \"wrapper-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(\"section\", {\n      className: \"wrapper-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(VideoInfo, {\n      currentVideo: this.state.currentVideo,\n      likeVideo: this.likeVideo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }), React.createElement(Comments, {\n      currentVideo: this.state.currentVideo,\n      addComment: this.addComment,\n      deleteComment: this.deleteComment,\n      loading: this.state.loading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    })), React.createElement(VideosList, {\n      videos: this.state.videos,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/andriitaran/Desktop/brainstation-projects/projects/andrii-taran-brainflix/sprint-three/client/src/App.js"],"names":["React","Component","axios","Header","VideoPlayer","VideoInfo","Comments","VideosList","mainVideo","App","state","videos","currentVideo","loading","addComment","comment","randomVideoId","props","match","params","id","method","url","data","name","headers","then","response","get","comments","sort","a","b","timestamp","setState","deleteComment","videoId","delete","likeVideo","video","componentDidMount","prevProps","responseArr","filter","componentDidUpdate","console","log","all","window","scrollTo","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./styles/main.css\";\nimport axios from \"axios\";\nimport Header from \"./components/Header\";\nimport VideoPlayer from \"./components/VideoPlayer\";\nimport VideoInfo from \"./components/VideoInfo\";\nimport Comments from \"./components/Comments\";\nimport VideosList from \"./components/VideosList\";\n\nconst mainVideo = \"1af0jruup5gu\";\n\nexport default class App extends Component {\n  state = {\n    videos: [],\n    currentVideo: {},\n    loading: false\n  };\n\n  componentDidMount(prevProps) {\n    axios({\n      method: \"get\",\n      url: `http://localhost:5000/api/videos/${mainVideo}`,\n      headers: { \"Access-Control-Allow-Origin\": \"*\" }\n    })\n      .then(response => {\n        response.data.comments.sort((a, b) => {\n          //sorts comment by time of posting\n          return b.timestamp - a.timestamp;\n        });\n        this.setState({\n          currentVideo: response.data, // sets random video as the main video\n          loading: true\n        });\n      })\n      .then(\n        axios.get(\"http://localhost:5000/api/videos\").then(responseArr => {\n          this.setState({\n            videos: responseArr.data.filter(video => {\n              // excludes main video from array of side videos\n              return video.id !== this.state.currentVideo.id;\n            })\n          });\n        })\n      );\n  }\n\n  componentDidUpdate(prevProps) {\n    console.log(\"Component was updated!\");\n    if (prevProps.match.params.id !== this.props.match.params.id) {\n      // checks if new video is not the same as a previous one\n      axios\n        .all([\n          axios.get(\n            //gets main video details from an API\n            `http://localhost:5000/api/videos/${this.props.match.params.id}`\n          ),\n          axios.get(\n            //gets videos from API\n            `http://localhost:5000/api/videos/`\n          )\n        ])\n        .then(responseArr => {\n          responseArr[0].data.comments.sort((a, b) => {\n            //sorts comments by time of posting\n            return b.timestamp - a.timestamp;\n          });\n          this.setState({\n            //assigns new main video and side video to state\n            currentVideo: responseArr[0].data,\n            videos: responseArr[1].data.filter(video => {\n              return video.id !== this.props.match.params.id;\n            }),\n            loading: true\n          });\n        });\n      window.scrollTo(0, 0); // takes user to the top of the page after click on the side video\n    }\n  }\n\n  // function for adding new comments\n  addComment = comment => {\n    const randomVideoId = //to make sure adding comments work correctly only on the first loaded video, we're comparing main video with random video stored in state\n      this.props && this.props.match.params.id\n        ? this.props.match.params.id\n        : this.state.currentVideo.id;\n    axios({\n      method: \"post\", //posts comments to the API\n      url: `http://localhost:5000/api/videos/${randomVideoId}/comments`,\n      data: {\n        name: comment.name,\n        comment: comment.comment\n      },\n      headers: {\n        \"Content-Type\": \"application/json;charset=UTF-8\"\n      }\n    })\n      .then(response => {\n        return axios.get(\n          //gets video with updated comments\n          `http://localhost:5000/api/videos/${randomVideoId}`\n        );\n      })\n      .then(response => {\n        //sorts comments by time of posting\n        response.data.comments.sort((a, b) => {\n          return b.timestamp - a.timestamp;\n        });\n        this.setState({\n          currentVideo: response.data //updates video with updated comments\n        });\n      });\n  };\n\n  // function that deletes a comment\n  deleteComment = comment => {\n    const videoId = //to make sure adding comments work correctly only on the first loaded video, we're comparing main video with random video stored in state\n      this.props && this.props.match.params.id\n        ? this.props.match.params.id\n        : this.state.currentVideo.id;\n    axios\n      .delete(\n        `http://localhost:5000/api/videos/${videoId}/comments/${comment.id}`\n      )\n      .then(response => {\n        return axios.get(\n          //gets video with updated comments\n          `http://localhost:5000/api/videos/${videoId}`\n        );\n      })\n      .then(response => {\n        //sorts comments by time of posting\n        response.data.comments.sort((a, b) => {\n          return b.timestamp - a.timestamp;\n        });\n        this.setState({\n          currentVideo: response.data //updates video with updated comments\n        });\n      });\n  };\n  // function for \"liking\" videos\n  likeVideo = video => {\n    axios({\n      method: \"put\",\n      url: `http://localhost:5000/api/videos/${video.id}/likes`,\n      headers: { \"Access-Control-Allow-Origin\": \"*\" }\n    }).then(response => {\n      response.data.comments.sort((a, b) => {\n        //sorts comments by time of posting\n        return b.timestamp - a.timestamp;\n      });\n      this.setState({\n        currentVideo: response.data //updates video with updated likes and proper comments timestamp\n      });\n    });\n  };\n\n  render() {\n    return (\n      <>\n        <Header />\n        <VideoPlayer currentVideo={this.state.currentVideo} />\n        <section className=\"wrapper-1\">\n          <section className=\"wrapper-2\">\n            <VideoInfo\n              currentVideo={this.state.currentVideo}\n              likeVideo={this.likeVideo}\n            />\n            <Comments\n              currentVideo={this.state.currentVideo}\n              addComment={this.addComment}\n              deleteComment={this.deleteComment}\n              loading={this.state.loading}\n            />\n          </section>\n          <VideosList videos={this.state.videos} />\n        </section>\n      </>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}