{"ast":null,"code":"/* DYNAMIC TIMESTAMP */\nconst timeSince = date => {\n  let seconds = Math.floor((new Date() - date) / 1000);\n  let intervalType; // placeholder for type of interval - year, month, day, hour, etc.\n\n  let interval = Math.floor(seconds / 31536000);\n\n  if (interval >= 1) {\n    intervalType = \"year\"; // check if more than 1 year have passed\n  } else {\n    interval = Math.floor(seconds / 2592000);\n\n    if (interval >= 1) {\n      intervalType = \"month\"; // check if more than 1 month have passed\n    } else {\n      interval = Math.floor(seconds / 86400);\n\n      if (interval >= 1) {\n        intervalType = \"day\"; // check if more than 1 day have passed\n      } else {\n        interval = Math.floor(seconds / 3600);\n\n        if (interval >= 1) {\n          intervalType = \"hour\"; // check if more than 1 hour have passed\n        } else {\n          interval = Math.floor(seconds / 60);\n\n          if (interval >= 1) {\n            intervalType = \"minute\"; // check if more than 1 minute have passed\n          } else {\n            if (interval === 0) {\n              interval = seconds;\n              intervalType = \"second\";\n            }\n          }\n        }\n      }\n    }\n  }\n\n  if (interval > 1 || interval === 0) {\n    intervalType += \"s\";\n  }\n\n  return `${interval} ${intervalType} ago`; // used ES6 strings template\n};","map":{"version":3,"sources":["/Users/andriitaran/Desktop/brainstation-projects/projects/andrii-taran-brainflix/sprint-one/src/components/timeSince.js"],"names":["timeSince","date","seconds","Math","floor","Date","intervalType","interval"],"mappings":"AAAA;AAEA,MAAMA,SAAS,GAAGC,IAAI,IAAI;AACxB,MAAIC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAW,CAAC,IAAIC,IAAJ,KAAaJ,IAAd,IAAsB,IAAjC,CAAd;AACA,MAAIK,YAAJ,CAFwB,CAEN;;AAClB,MAAIC,QAAQ,GAAGJ,IAAI,CAACC,KAAL,CAAWF,OAAO,GAAG,QAArB,CAAf;;AACA,MAAIK,QAAQ,IAAI,CAAhB,EAAmB;AACjBD,IAAAA,YAAY,GAAG,MAAf,CADiB,CACM;AACxB,GAFD,MAEO;AACLC,IAAAA,QAAQ,GAAGJ,IAAI,CAACC,KAAL,CAAWF,OAAO,GAAG,OAArB,CAAX;;AACA,QAAIK,QAAQ,IAAI,CAAhB,EAAmB;AACjBD,MAAAA,YAAY,GAAG,OAAf,CADiB,CACO;AACzB,KAFD,MAEO;AACLC,MAAAA,QAAQ,GAAGJ,IAAI,CAACC,KAAL,CAAWF,OAAO,GAAG,KAArB,CAAX;;AACA,UAAIK,QAAQ,IAAI,CAAhB,EAAmB;AACjBD,QAAAA,YAAY,GAAG,KAAf,CADiB,CACK;AACvB,OAFD,MAEO;AACLC,QAAAA,QAAQ,GAAGJ,IAAI,CAACC,KAAL,CAAWF,OAAO,GAAG,IAArB,CAAX;;AACA,YAAIK,QAAQ,IAAI,CAAhB,EAAmB;AACjBD,UAAAA,YAAY,GAAG,MAAf,CADiB,CACM;AACxB,SAFD,MAEO;AACLC,UAAAA,QAAQ,GAAGJ,IAAI,CAACC,KAAL,CAAWF,OAAO,GAAG,EAArB,CAAX;;AACA,cAAIK,QAAQ,IAAI,CAAhB,EAAmB;AACjBD,YAAAA,YAAY,GAAG,QAAf,CADiB,CACQ;AAC1B,WAFD,MAEO;AACL,gBAAIC,QAAQ,KAAK,CAAjB,EAAoB;AAClBA,cAAAA,QAAQ,GAAGL,OAAX;AACAI,cAAAA,YAAY,GAAG,QAAf;AACD;AACF;AACF;AACF;AACF;AACF;;AAED,MAAIC,QAAQ,GAAG,CAAX,IAAgBA,QAAQ,KAAK,CAAjC,EAAoC;AAClCD,IAAAA,YAAY,IAAI,GAAhB;AACD;;AACD,SAAQ,GAAEC,QAAS,IAAGD,YAAa,MAAnC,CApCwB,CAoCkB;AAC3C,CArCD","sourcesContent":["/* DYNAMIC TIMESTAMP */\n\nconst timeSince = date => {\n  let seconds = Math.floor((new Date() - date) / 1000);\n  let intervalType; // placeholder for type of interval - year, month, day, hour, etc.\n  let interval = Math.floor(seconds / 31536000);\n  if (interval >= 1) {\n    intervalType = \"year\"; // check if more than 1 year have passed\n  } else {\n    interval = Math.floor(seconds / 2592000);\n    if (interval >= 1) {\n      intervalType = \"month\"; // check if more than 1 month have passed\n    } else {\n      interval = Math.floor(seconds / 86400);\n      if (interval >= 1) {\n        intervalType = \"day\"; // check if more than 1 day have passed\n      } else {\n        interval = Math.floor(seconds / 3600);\n        if (interval >= 1) {\n          intervalType = \"hour\"; // check if more than 1 hour have passed\n        } else {\n          interval = Math.floor(seconds / 60);\n          if (interval >= 1) {\n            intervalType = \"minute\"; // check if more than 1 minute have passed\n          } else {\n            if (interval === 0) {\n              interval = seconds;\n              intervalType = \"second\";\n            }\n          }\n        }\n      }\n    }\n  }\n\n  if (interval > 1 || interval === 0) {\n    intervalType += \"s\";\n  }\n  return `${interval} ${intervalType} ago`; // used ES6 strings template\n};\n"]},"metadata":{},"sourceType":"module"}